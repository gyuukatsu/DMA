# -*- coding: utf-8 -*-
"""DMA_project 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KaIx4tae6msDWq86qqs8-KkvdvAkjAAG
"""

import mysql.connector

team = 1

# Requirement1: create schema 
def requirement1(host, user, password):
    cnx = mysql.connector.connect(host=host, user=user, password=password)
    cursor = cnx.cursor()
    cursor.execute('SET GLOBAL innodb_buffer_pool_size=2*1024*1024*1024;')
    cursor.execute('create database if not exists DMA_team01;')
    cursor.close()

# Requierement2: create table
def requirement2(host, user, password):
    cnx = mysql.connector.connect(host=host, user=user, password=password)
    cursor = cnx.cursor()
    
    cursor.execute('SET GLOBAL innodb_buffer_pool_size=2*1024*1024*1024;')
    cursor.execute('use DMA_team01;')
    
    ###  app  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS app(
    id VARCHAR(255) NOT NULL,
    title VARCHAR(255) NOT NULL,
    developer_id VARCHAR(255) NOT NULL,
    description INT(11) NOT NULL,
    pricing_hint VARCHAR(255),
    PRIMARY KEY (id))
    DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  app_category  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS app_category(
    app_id VARCHAR(255) NOT NULL,
    category_id VARCHAR(255) NOT NULL) 
    DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  category  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS category(
    id VARCHAR(255) NOT NULL,
    title VARCHAR(255) NOT NULL,
    PRIMARY KEY (id) )
    DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  category_developer  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS category_developer(
    category_id VARCHAR(255) NOT NULL,
    developer_id VARCHAR(255) NOT NULL
    )DEFAULT CHARACTER SET utf8mb4
    ;''')

    ###  category_user  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS category_user(
    category_id VARCHAR(255) NOT NULL,
    user_id VARCHAR(255) NOT NULL
    )DEFAULT CHARACTER SET utf8mb4
    ;''')

    ###  developer  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS developer(
    id VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    profile_image TINYINT(1) NOT NULL,
    profile_link INT(11),
    PRIMARY KEY(id))
    DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  key_benefit  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS key_benefit(
    app_id VARCHAR(255) NOT NULL,
    title VARCHAR(255) NOT NULL,
    description INT(11),
    PRIMARY KEY(app_id,title)
    )DEFAULT CHARACTER SET utf8mb4
    ;''')

    ###  message  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS message(
    id VARCHAR(255) NOT NULL,
    recipient_id VARCHAR(255) NOT NULL,
    sent_date DATETIME NOT NULL,
    PRIMARY KEY(id)
    )DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  message_app  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_app(
    message_id VARCHAR(255) NOT NULL,
    app_id VARCHAR(255) NOT NULL
    )DEFAULT CHARACTER SET utf8mb4
    ;''')

    ###  pricing_plan  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS pricing_plan(
    id VARCHAR(255) NOT NULL,
    app_id VARCHAR(255) NOT NULL,
    title VARCHAR(255),
    price VARCHAR(255) NOT NULL,
    PRIMARY KEY (id) )
    DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  reply  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reply(
    id VARCHAR(255) NOT NULL,
    review_id VARCHAR(255) NOT NULL,
    developer_id VARCHAR(255) NOT NUll,
    content INT(11),
    posted_date DATETIME,
    PRIMARY KEY (id) )
    DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  review  ###  
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS review(
    id VARCHAR(255) NOT NULL,
    app_id VARCHAR(255) NOT NULL,
    user_id VARCHAR(255) NOT NULL,
    rating INT(11) NOT NULL,
    body INT(11) NOT NULL,
    helpful_count INT(11) NOT NULL,
    posted_date DATETIME,
    PRIMARY KEY (id))
    DEFAULT CHARACTER SET utf8mb4
    ;''')
    
    ###  user  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user(
    id VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY(id))
    DEFAULT CHARACTER SET utf8mb4
    ;''')

    ###  user_follow  ###
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_follow(
    user_id VARCHAR(255) NOT NULL,
    follower_user_id VARCHAR(255) NOT NULL,
    follow_date DATETIME NOT NULL
    )DEFAULT CHARACTER SET utf8mb4
    ;''')
   
    cursor.close()

# Requirement3: insert data
def requirement3(host, user, password, directory):
    cnx = mysql.connector.connect(host=host, user=user, password=password)
    cursor = cnx.cursor()
    cursor.execute('SET GLOBAL innodb_buffer_pool_size=2*1024*1024*1024;')
    cursor.execute('use DMA_team01;')

    #파일 명 리스트
    name_list=['app',
               'app_category',
               'category',
               'category_developer',
               'category_user',
               'developer',
               'key_benefit',
               'message',
               'message_app',
               'pricing_plan',
               'reply',
               'review',
               'user',
               'user_follow'
               ]

    #주소 리스트
    dir_list=[]
    for name in name_list:
        dir_list.append(directory+'{}.csv'.format(name))


    #함수 정의해주기
    def insert_file(csv_dir,name):
        csv_dir='\''+csv_dir+'\''

        #뼈대 query
        empty_query='''
        LOAD DATA INFILE {}
        INTO TABLE {} 
        CHARACTER SET utf8mb4
        FIELDS TERMINATED BY ','
        ESCAPED BY '\'
        LINES TERMINATED BY '\n'
        IGNORE 1 ROWS
        ;'''

        #뼈대에 파일주소와 파일명 넣기
        query=empty_query.format(csv_dir,name)
        
        #user_follow의 경우에 datetime의 형태가 조금 다르므로 변환 과정 추가.
        if name=='user_follow':
            extend='''
            (user_id,follower_user_id,@follow_date)
            SET follow_date = STR_TO_DATE(@follow_date,\'%Y.%m.%d %H:%i\')
            ;'''
            query=query[:-1]+extend
        
        # load문 실행
        cursor.execute(query)
        cnx.commit()

    #앞서 정의한 함수를 모든 파일에 대해 실행   
    for i in range(0,14):
        insert_file(dir_list[i],name_list[i])

    cursor.close()

# Requirement4: add constraint (foreign key)
def requirement4(host, user, password):
    cnx = mysql.connector.connect(host=host, user=user, password=password)
    cursor = cnx.cursor()
    cursor.execute('SET GLOBAL innodb_buffer_pool_size=2*1024*1024*1024;')
    cursor.execute('use DMA_team01;')

    #FOREIGN KEY 설정
    cursor.execute('ALTER TABLE app ADD CONSTRAINT FOREIGN KEY (developer_id) REFERENCES developer(id);')
    cursor.execute('ALTER TABLE app_category ADD CONSTRAINT FOREIGN KEY (app_id) REFERENCES app(id);')
    cursor.execute('ALTER TABLE app_category ADD CONSTRAINT FOREIGN KEY (category_id) REFERENCES category(id);')
    cursor.execute('ALTER TABLE pricing_plan ADD CONSTRAINT FOREIGN KEY (app_id) REFERENCES app(id);')
    cursor.execute('ALTER TABLE review ADD CONSTRAINT FOREIGN KEY (app_id) REFERENCES app(id);')
    cursor.execute('ALTER TABLE review ADD CONSTRAINT FOREIGN KEY (user_id) REFERENCES user(id);')
    cursor.execute('ALTER TABLE user_follow ADD CONSTRAINT FOREIGN KEY (user_id) REFERENCES user(id);')
    cursor.execute('ALTER TABLE user_follow ADD CONSTRAINT FOREIGN KEY (follower_user_id) REFERENCES user(id);')
    cursor.execute('ALTER TABLE category_developer ADD CONSTRAINT FOREIGN KEY (category_id) REFERENCES category(id);')
    cursor.execute('ALTER TABLE category_developer ADD CONSTRAINT FOREIGN KEY (developer_id) REFERENCES developer(id);')
    cursor.execute('ALTER TABLE category_user ADD CONSTRAINT FOREIGN KEY (category_id) REFERENCES category(id);')
    cursor.execute('ALTER TABLE category_user ADD CONSTRAINT FOREIGN KEY (user_id) REFERENCES user(id);')
    cursor.execute('ALTER TABLE key_benefit ADD CONSTRAINT FOREIGN KEY (app_id) REFERENCES app(id);')
    cursor.execute('ALTER TABLE message ADD CONSTRAINT FOREIGN KEY (recipient_id) REFERENCES user(id);')
    cursor.execute('ALTER TABLE message_app ADD CONSTRAINT FOREIGN KEY (message_id) REFERENCES message(id);')
    cursor.execute('ALTER TABLE message_app ADD CONSTRAINT FOREIGN KEY (app_id) REFERENCES app(id);')
    cursor.execute('ALTER TABLE reply ADD CONSTRAINT FOREIGN KEY (review_id) REFERENCES review(id);')
    cursor.execute('ALTER TABLE reply ADD CONSTRAINT FOREIGN KEY (developer_id) REFERENCES developer(id);')
   
    cursor.close()

host = 'localhost'
user = 'root'
password = 'seunggyu1!'
directory_in = 'C:/ProgramData/MySQL/MySQL Server 8.0/Uploads/'

requirement1(host=host, user=user, password=password)
requirement2(host=host, user=user, password=password)
requirement3(host=host, user=user, password=password, directory=directory_in)
requirement4(host=host, user=user, password=password)

